% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/files_gating.R
\name{gate_live_cells_update}
\alias{gate_live_cells_update}
\title{Gate live cells, updated to keep eosinophils}
\usage{
gate_live_cells_update(
  flow_frame,
  file_name = NULL,
  viability_channel,
  eosinophil_channel,
  eosinophil_gate = NULL,
  tinypeak_removal_viability = 0.8,
  alpha_viability = 0.1,
  arcsine_transform = TRUE,
  save_gated_flow_frame = FALSE,
  suffix = "_live_gated",
  out_dir = NULL,
  ...
)
}
\arguments{
\item{flow_frame}{A flowframe that contains cytometry data.}

\item{file_name}{Character, the file name used for saving the flow frame
(if save_gated_flow_frame = TRUE) and for plotting, if NULL (default)
the file name stored in keyword FIL will be used,}

\item{viability_channel}{Character, the channel name used for viability staining}

\item{tinypeak_removal_viability}{Numeric from 0-1, as in deGate to exclude/include
tiny peaks in the tail of the density distribution curve for both viability channel}

\item{alpha_viability}{Numeric, 0-1, as in deGate specify the significance of change
in the slope of viability channel}

\item{arcsine_transform}{Logical, if the data should be transformed with
arcsine transformation and cofactor 5.}

\item{save_gated_flow_frame}{Logical, if gated flow frame should be saved.
Only cells falling into intact cell region will be saved. Default set to FALSE.}

\item{suffix}{Character, suffix placed in the name of saved fcs file, only
if save_gated_flow_frame = TRUE.Defult is "_intact_gated".}

\item{out_dir}{Character, pathway to where the files should be saved,
if NULL (default) files will be saved to file.path(getwd(), Gated).}

\item{...}{Arguments to pass to flowDensity::plotDens().}

\item{tinypeak_removal_Iridium}{The same as tinypeak_removal_viability but for
the head and tail of the density distribution curve in Iridium channel}

\item{alpha_Iridium}{The same as in alpha_viability but for the Iridium}
}
\value{
An untransformed flow frame with live cells only
}
\description{
Performs gating of live cells using flowDensity::deGate
}
\examples{

#' Set input directory
aggregate_dir <- file.path(dir, "Aggregated")

# List files for gating
files <- list.files(path = aggregate_dir,
                    pattern = ".fcs$",
                    full.names = TRUE)

# Create directory to store plot
gate_dir <- file.path(getwd(), "Gated")
if(!dir.exists(gate_dir)){dir.create(gate_dir)}

# Gate the files and plot the gating strategy for each file
n_plots <- 1
png(file.path(gate_dir, paste0("gating.png")),
width = n_plots * 300,
height = length(files) * 300)
layout(matrix(1:(length(files) * n_plots), ncol = n_plots, byrow = TRUE))

for (file in files){

 ff <- flowCore::read.FCS(filename = file,
                          transformation = FALSE)

 ff <- gate_live_cells(flow_frame = ff,
                       viability_channel = "Pt195Di", save_gated_flow_frame = TRUE,
                       file_name = basename(file))
}

dev.off()

}
